//---------------------------------------------------------------------
//---------------------------------------------------------------------
// The Nonlinear Game Engine (NGE) version 0.0.1 Beta
// (c) Mikael Fridenfalk
// All rights reserved
// Pending patent SE2330492-6
// The engine is a template for use in the course:
// Real-Time Graphics Programming for Games 1, 7.5 c, 2023
// Uppsala University, Sweden
// Other use requires a written permission from the copyright holder
//---------------------------------------------------------------------
//---------------------------------------------------------------------
#include "GFX2D.h"
//---------------------------------------------------------------------
//---------------------------------------------------------------------
GFX2D::GFX2D(){
    //---------------------------------------------
    mMtxFont = new char[256][7][5];
    Draw2D_InitMtxFont();
    //---------------------------------------------
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
GFX2D::~GFX2D(){
    delete [] mMtxFont;
}
//---------------------------------------------------------------------
void GFX2D::GenTex(int texIdx)
{
glBindTexture(GL_TEXTURE_2D, texIdx);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
glCopyTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 0, 0, Common::sW, Common::sH, 0);
}
//---------------------------------------------------------------------
void GFX2D::Cam2D_SwitchTo2DMode_Begin(){
    //Switch to 2D orthographic
    glDisable(GL_DEPTH_TEST);
    glDisable(GL_LIGHTING);
    glMatrixMode(GL_PROJECTION);
    glPushMatrix();
    glLoadIdentity();
    gluOrtho2D(0, (double)Common::sW, 0, (double)Common::sH);
    glMatrixMode(GL_MODELVIEW);
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void GFX2D::Cam2D_SwitchTo2DMode_End(){
    //Switch back to 3D proj
    glMatrixMode(GL_PROJECTION);
    glPopMatrix();
    glMatrixMode(GL_MODELVIEW);
    //glEnable(GL_LIGHTING);
    glEnable(GL_DEPTH_TEST);
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
int GFX2D::SaveOpenGLWinTGA(int w, int h){
    //---------------------------------------
    //---------------------------------------
    int szBytes = 3 * w * h;
    UCHAR * pixels = new UCHAR[szBytes];
    FILE * file;
#ifdef _WIN64
    errno_t err = fopen_s(&file,"Tex/Img.tga","wb");
    if (err != 0) return -1;
#elif __APPLE__
    file = fopen("Tex/Img.tga","wb");
    if (file == NULL) return -1;
#endif
    //---------------------------------------
    //---------------------------------------
    UCHAR x[18]; For (i,18) x[i] = 0; x[2] = 2;
    x[12] = w%256; x[13] = w/256;
    x[14] = h%256; x[15] = h/256;
    x[16] = 24; fwrite(x,1,18,file);
    //---------------------------------------
    //---------------------------------------
    glReadPixels(0,0,w,h,GL_BGR,GL_UNSIGNED_BYTE,pixels);
    fwrite(pixels,1,szBytes,file); fclose(file);
    delete [] pixels; return 0;
    //---------------------------------------
    //---------------------------------------
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void GFX2D::Draw2D_MtxText(int idx, const char *fmt,...){
    //--------------------
    double ratio = double(Common::sW)/3840.;
    //--------------------
    double x = Common::sW - 1320. * ratio;
    double y = ratio * (22. + 52. * idx);
    double sz = ratio * 3.6;
    int alignm = 0;
    //--------------------
    glPushMatrix();
    glLoadIdentity();
    //--------------------
    const int MAX_TEXT_BUFFER_SIZE = 256;
    char text[MAX_TEXT_BUFFER_SIZE]; va_list ap;
    if (fmt == NULL) return;
    va_start(ap, fmt);
    vsnprintf(text, MAX_TEXT_BUFFER_SIZE, fmt, ap);
    va_end(ap);
    
    const double C1 = 9., C2 = .5 * C1;
    if (alignm == 1) x -= C2 * double(strlen(text)) * sz;
    //--------------------
    double sn = C1*sz;
    int n = 0;
    while (text[n] != 0){
        glColor3ub(0,0,0);
        Draw2D_MtxFont(x+sn*double(n), y, sz, text[n]);
        glColor3ub(63,255,180);//Yellow shade
        //glColor3ub(255,200,0);//Yellow shade
        //glColor3ub(127,191,255);//Blue shade
        //glColor3ub(255,255,255);//White
        Draw2D_MtxFont(x+sn*double(n)+1., y+1, sz, text[n]);
        n++;
    }
    //--------------------
    glPopMatrix();
    //--------------------
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void GFX2D::Draw2D_MtxText_XL(int idx, const char *fmt,...){
    //--------------------
    double ratio = 6./3840. * double(Common::sW);
    //--------------------
    double x = Common::sW - 607 * ratio;
    double y = ratio * (10. + 52. * idx);
    double sz = ratio * 3.6;
    //--------------------
    const int MAX_TEXT_BUFFER_SIZE = 256;
    char text[MAX_TEXT_BUFFER_SIZE]; va_list ap;
    if (fmt == NULL) return;
    va_start(ap, fmt);
    vsnprintf(text, MAX_TEXT_BUFFER_SIZE, fmt, ap);
    va_end(ap);
    //--------------------
    glDisable(GL_LIGHTING);
    glEnable(GL_BLEND);
    //--------------------
    glPushMatrix();
    glLoadIdentity();
    glColor4ub(0,0,0,180);
    glBegin(GL_QUADS);
    double d1 = -1.5, d2 = 10.5;
    glVertex2d(0,y+d1*sz);
    glVertex2d(Common::sW,y+d1*sz);
    glVertex2d(Common::sW,y+d2*sz);
    glVertex2d(0,y+d2*sz);
    glEnd();
    glPopMatrix();
    //--------------------
    glPushMatrix();
    glLoadIdentity();
    //--------------------
    double sn = 9.*sz;
    int n = 0;
    double alpha = .003 * double(SDL_GetTicks());
    int a = 205 + int(50. * sin(alpha));
    while (text[n] != 0){
        glColor4ub(0,0,0,a);
        Draw2D_MtxFont(x+sn*double(n), y, sz, text[n]);
        glColor4ub(255,200,0,a);
        Draw2D_MtxFont(x+sn*double(n)+2, y+2, sz, text[n]);
        n++;
    }
    //glEnable(GL_LIGHTING);
    glDisable(GL_BLEND);
    //--------------------
    glPopMatrix();
    //--------------------
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void GFX2D::Draw_Test2D(){
    //Cam2D_SwitchTo2DMode_Begin();
    glPushMatrix();
    glLoadIdentity();
    //--------------------------------------------Geometry
    glLineWidth(3);
    glPointSize(10);
    
    double ratio = double(Common::sW)/3840.;
    
    int method[] = {GL_POINTS,GL_LINES,GL_LINE_STRIP,GL_LINE_LOOP,GL_POLYGON};
    
    For (i,5){
        glBegin(method[i]);
        double dx = ratio * (200 + 220*i);
        double dy = ratio * 350;
        double a = ratio * 50.;
        glColor3ub(255,0,0);   glVertex2d(-a+dx,-a+dy);
        glColor3ub(127,127,0); glVertex2d(-a+dx, a+dy);
        glColor3ub(0,255,0);   glVertex2d( a+dx, a+dy);
        glColor3ub(0,0,255);   glVertex2d( a+dx,-a+dy);
        glEnd();
    }
    glPopMatrix();
    //Cam2D_SwitchTo2DMode_End();
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------





//---------------------------------------------------------------------
//---------------------------------------------------------------------
//                              Mtx Font
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void GFX2D::Draw2D_InitMtxFont(){
    
    const char F1[] =
    
    "00000" "00000" "00000" "00000" "00000" "00000" "00000"//SPACE
    "00100" "00100" "00100" "00100" "00100" "00000" "00100"//!
    "01010" "01010" "00000" "00000" "00000" "00000" "00000"//"
    "01010" "01010" "11111" "01010" "11111" "01010" "01010"//#
    "00100" "01111" "10100" "01110" "00101" "11110" "00100"//$
    "01001" "10101" "01010" "01110" "01010" "10101" "10010"//%
    "01100" "10010" "10100" "01000" "10101" "10010" "01101"//&
    "00100" "00100" "00000" "00000" "00000" "00000" "00000"//'
    "00010" "00100" "01000" "01000" "01000" "00100" "00010"//(
    "01000" "00100" "00010" "00010" "00010" "00100" "01000"//)
    "00000" "10101" "01110" "00100" "01110" "10101" "00000"//star
    "00000" "00100" "00100" "11111" "00100" "00100" "00000"//+
    "00000" "00000" "00000" "00000" "01100" "00100" "01000"//,
    "00000" "00000" "00000" "11111" "00000" "00000" "00000"//-
    "00000" "00000" "00000" "00000" "00000" "01100" "01100"//.
    "00000" "00001" "00010" "00100" "01000" "10000" "00000"// /
    "01110" "10001" "10011" "10101" "11001" "10001" "01110"//0
    "00100" "01100" "00100" "00100" "00100" "00100" "01110"//1
    "01110" "10001" "00001" "00010" "00100" "01000" "11111"//2
    "01110" "10001" "00001" "00110" "00001" "10001" "01110"//3
    "00010" "00110" "01010" "10010" "11111" "00010" "00111"//4
    "11111" "10000" "11110" "00001" "00001" "10001" "01110"//5
    "01110" "10001" "10000" "11110" "10001" "10001" "01110"//6
    "11111" "10001" "00010" "00010" "00100" "00100" "00100"//7
    "01110" "10001" "10001" "01110" "10001" "10001" "01110"//8
    "01110" "10001" "10001" "01111" "00001" "00001" "01110"//9
    "00000" "01100" "01100" "00000" "01100" "01100" "00000"//:
    "00000" "01100" "01100" "00000" "01100" "00100" "01000"//;
    "00001" "00010" "00100" "01000" "00100" "00010" "00001"//>
    "00000" "00000" "11111" "00000" "11111" "00000" "00000"//=
    "10000" "01000" "00100" "00010" "00100" "01000" "10000"//>
    "01110" "10001" "10001" "00010" "00100" "00000" "00100"//?
    "01110" "10001" "10011" "10101" "10111" "10000" "01110"//@
    "01110" "10001" "10001" "11111" "10001" "10001" "10001"//A
    "11110" "10001" "10001" "11110" "10001" "10001" "11110"//B
    "01110" "10001" "10000" "10000" "10000" "10001" "01110"//C
    "11110" "10001" "10001" "10001" "10001" "10001" "11110"//D
    "11111" "10000" "10000" "11110" "10000" "10000" "11111"//E
    "11111" "10000" "10000" "11110" "10000" "10000" "10000"//F
    "01110" "10001" "10000" "10111" "10001" "10001" "01110"//G
    "10001" "10001" "10001" "11111" "10001" "10001" "10001"//H
    "01110" "00100" "00100" "00100" "00100" "00100" "01110"//I
    "00001" "00001" "00001" "00001" "10001" "10001" "01110"//J
    "10001" "10010" "10100" "11000" "10100" "10010" "10001"//K
    "10000" "10000" "10000" "10000" "10000" "10000" "11111"//L
    "10001" "11011" "10101" "10101" "10001" "10001" "10001"//M
    "10001" "10001" "11001" "10101" "10011" "10001" "10001"//N
    "01110" "10001" "10001" "10001" "10001" "10001" "01110"//O
    "11110" "10001" "10001" "11110" "10000" "10000" "10000"//P
    "01110" "10001" "10001" "10001" "10101" "10010" "01101"//Q
    "11110" "10001" "10001" "11110" "10100" "10010" "10001"//R
    "01111" "10000" "10000" "01110" "00001" "00001" "11110"//S
    "11111" "00100" "00100" "00100" "00100" "00100" "00100"//T
    "10001" "10001" "10001" "10001" "10001" "10001" "01110"//U
    "10001" "10001" "10001" "10001" "10001" "01010" "00100"//V
    "10001" "10001" "10001" "10101" "10101" "10101" "01010"//W
    "10001" "10001" "01010" "00100" "01010" "10001" "10001"//X
    "10001" "10001" "10001" "01010" "00100" "00100" "00100"//Y
    "11111" "00001" "00010" "00100" "01000" "10000" "11111"//Z
    "01110" "01000" "01000" "01000" "01000" "01000" "01110"//[
    "00000" "10000" "01000" "00100" "00010" "00001" "00000"//'\\'
    "01110" "00010" "00010" "00010" "00010" "00010" "01110"//]
    "00000" "00100" "01010" "10001" "00000" "00000" "00000"//^
    "00000" "00000" "00000" "00000" "00000" "00000" "11111"//_
    "01000" "00100" "00010" "00000" "00000" "00000" "00000"//`
    "00000" "00000" "01110" "00001" "01111" "10001" "01111"//a
    "10000" "10000" "11110" "10001" "10001" "10001" "11110"//b
    "00000" "00000" "01111" "10000" "10000" "10000" "01111"//c
    "00001" "00001" "01111" "10001" "10001" "10001" "01111"//d
    "00000" "00000" "01110" "10001" "11111" "10000" "01110"//e
    "00110" "01001" "01000" "01000" "11110" "01000" "01000"//f
    "00000" "00000" "01110" "10001" "01111" "00001" "01110"//g
    "10000" "10000" "10000" "11110" "10001" "10001" "10001"//h
    "00000" "00100" "00000" "01100" "00100" "00100" "01110"//i
    "00100" "00000" "01100" "00100" "00100" "00100" "11100"//j
    "01000" "01000" "01001" "01010" "01100" "01010" "01001"//k
    "01100" "00100" "00100" "00100" "00100" "00100" "01110"//l
    "00000" "00000" "11110" "10101" "10101" "10101" "10101"//m
    "00000" "00000" "11110" "10001" "10001" "10001" "10001"//n
    "00000" "00000" "01110" "10001" "10001" "10001" "01110"//o
    "00000" "00000" "11110" "10001" "10001" "11110" "10000"//p
    "00000" "00000" "01111" "10001" "10001" "01111" "00001"//q
    "00000" "00000" "11110" "10001" "10000" "10000" "10000"//r
    "00000" "00000" "01110" "10000" "01110" "00001" "11110"//s
    "00000" "00100" "01111" "00100" "00100" "00100" "00011"//t
    "00000" "00000" "10001" "10001" "10001" "10001" "01110"//u
    "00000" "00000" "10001" "10001" "01010" "01010" "00100"//v
    "00000" "00000" "10101" "10101" "10101" "10101" "01010"//w
    "00000" "00000" "10001" "01010" "00100" "01010" "10001"//x
    "00000" "00000" "10001" "10001" "01110" "00100" "00100"//y
    "00000" "00000" "11111" "00010" "00100" "01000" "11111"//z
    "00011" "00100" "00100" "01000" "00100" "00100" "00011"//{
    "00100" "00100" "00100" "00100" "00100" "00100" "00100"//|
    "11000" "00100" "00100" "00010" "00100" "00100" "11000"//}
    "00000" "00000" "01000" "10101" "00010" "00000" "00000";//~
    
    const char F2[] =
    "00000" "11111" "10001" "10001" "10001" "11111" "00000";
    
    char SQUARE[7][5];
    
    For (j,7)  For (k,5) SQUARE[j][k] = F2[5*j+k];
    For (i,32) For (j,7) For (k,5) mMtxFont[i][j][k] = SQUARE[j][k];
    For (i,95) For (j,7) For (k,5)
    mMtxFont[i+32][j][k] = F1[35*i+5*j+k];
    for (int i = 127; i < 256; i++) For (j,7) For (k,5)
        mMtxFont[i][j][k] = SQUARE[j][k];
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void GFX2D::Draw2D_MtxFont(double x, double y, double sz, Uint8 c){
    if (c == ' ') return;
    double b = sz > 10. ? 1.3*sz : 1.5*sz;
    glBegin(GL_QUADS);
    For (m,7) For (n,5){
        if (mMtxFont[c][6-m][n] == '0') continue;
        double M = b*double(m), N = b*double(n);
        glVertex2d(x+N,    y+M);
        glVertex2d(x+N+sz, y+M);
        glVertex2d(x+N+sz, y+M+sz);
        glVertex2d(x+N,    y+M+sz);
    }
    glEnd();
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
