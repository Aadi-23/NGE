//---------------------------------------------------------------------
//---------------------------------------------------------------------
#pragma once
//---------------------------------------------------------------------
//---------------------------------------------------------------------
#include "Frustum.h"
//---------------------------------------------------------------------
//---------------------------------------------------------------------
#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
//---------------------------------------------------------------------
//---------------------------------------------------------------------
using namespace std;
//---------------------------------------------------------------------
//---------------------------------------------------------------------
class Prim : protected Frustum {
private:
    //-------------------------------------------------------
    typedef pair<int, double> pairX;
    //-------------------------------------------------------
protected:
    //-------------------------------------------------------
    enum {PRIM_LIGHTS_OFF, PRIM_LIGHTS_ON};
    enum {PRIM_BLEND_OFF, PRIM_BLEND_ON};
    //-------------------------------------------------------
    struct PRIM_STRUCT {
        //---------------------------------
        int N = 4;
        //---------------------------------
        int texIdx = -1;//-1 => no texture (a plain color)
        bool blendON = true;
        bool lightsON = true;
        //---------------------------------
        double collK = 1.;
        //---------------------------------
        //Vertex positions p[vertexIdx][x/y/z]
        //                L U     L D     R D     R U
        double v[4][3] = {{0,1,0},{0,0,0},{1,0,0},{1,0,0}};
        //---------------------------------
        UCHAR color[4] = {255,255,255,255};
        //---------------------------------
        //Texture coords uv[vertexIdx][u/v]
        //                 L U   L D   R D   R U
        double uv[4][2] = {{0,0},{0,1},{1,1},{1,0}};
        //---------------------------------
        double p[3];//Object center
        double n[3];//Normal
        double R;//SpBBox
        //---------------------------------
    };
    //-------------------------------------------------------
    Prim(void);
    ~Prim(void);
    //-------------------------------------------------------
    void    Prim_Clear();
    void    Prim_SortVector();
    int     Get_PrimN();
    //-------------------------------------------------------
    double  DotProd(double a[3], double b[3]);
    double  Length(double a[3]);
    double  Dist(double a[3], double b[3]);
    void    Normalize(double a[3]);
    void    CrossProd(double a[3], double b[3], double c[3]);
    //-------------------------------------------------------
    bool    Coll_SphTri(double p0[3], double p1[3],
                      double p2[3], double n[3], double K);
    bool    Coll_Spheres(double objCenter[3], double sphBBoxR);
    //-------------------------------------------------------
    bool    Add_Prim(PRIM_STRUCT& x);
    //-------------------------------------------------------
    void    Draw_Prim(int triIdx);
    void    Draw_Prims();
    //-------------------------------------------------------
    void    Draw_Center(int primIdx);
    void    Draw_Normal(int primIdx);
    void    Prim_A1_1();
    void    Prim_A1_2();
    //-------------------------------------------------------
    const int PRIM_MAX_N = 1 << 20;
    int     mPrimN = 0;
    double  mC[3];
    bool    mDrawNormals = false;//###
    bool    mSortPrims = true;//###
    //-------------------------------------------------------
    vector<int> mVec0;
    vector<pairX> mVec;
    //-------------------------------------------------------
    PRIM_STRUCT * mPrimV;//0...PRIM_MAX_N-1
    //-------------------------------------------------------
    double  mMVM[16];
    //-------------------------------------------------------
};
//---------------------------------------------------------------------
//---------------------------------------------------------------------
